<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown</title>
      <link href="/2020/04/02/markdown-xue-xi/"/>
      <url>/2020/04/02/markdown-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown学习"><a href="#Markdown学习" class="headerlink" title="Markdown学习"></a>Markdown学习</h1><h4 id="一-Markdown是什么"><a href="#一-Markdown是什么" class="headerlink" title="一. Markdown是什么"></a>一. Markdown是什么</h4><hr><ul><li>Markdown 是一种轻量级<strong>标记语言</strong>，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</li><li>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</li><li>Markdown 编写的文档后缀为 <strong>.md, .markdown</strong>。</li></ul><hr><a id="more"></a><h4 id="二-使用Markdown的理由"><a href="#二-使用Markdown的理由" class="headerlink" title="二. 使用Markdown的理由"></a>二. 使用Markdown的理由</h4><ul><li>它是易读（看起来很舒服）、易写（语法简单）、易更改（纯文本）。处处体现着极简主义的影子。</li><li>兼容HTML,可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li></ul><hr><h4 id="三-Markdown标题"><a href="#三-Markdown标题" class="headerlink" title="三. Markdown标题"></a>三. Markdown标题</h4><ul><li>使用 # 号标记</li></ul><ul><li>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。<pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre></li></ul><ul><li>效果如下<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li></ul><hr><h4 id="四-Markdown-段落"><a href="#四-Markdown-段落" class="headerlink" title="四. Markdown 段落"></a>四. Markdown 段落</h4><ul><li><p>Markdown 段落没有特殊的格式，直接编写文字就好。段落的换行是使用两个以上空格加上回车。</p></li><li><p><strong>字体</strong></p></li><li><p>Markdown 可以使用以下几种字体：</p></li></ul><pre><code>*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___</code></pre><ul><li><strong>分隔线</strong></li><li>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</li></ul><pre><code>**** * ******- - -----------</code></pre><ul><li><p><strong>删除线</strong></p></li><li><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p><pre><code>RUNOOB.COMGOOGLE.COM~~BAIDU.COM~~</code></pre><p><del>baidu.com</del></p></li><li><p><strong>下划线</strong></p></li><li><p>下划线可以通过 HTML 的<code>&lt;u&gt;</code>标签来实现：</p><pre><code>&lt;u&gt;带下划线文本&lt;/u&gt;</code></pre><p><u>带下划线文本</u></p></li><li><p><strong>脚注</strong></p></li><li><p>脚注是对文本的补充说明。</p></li><li><p>Markdown 脚注的格式如下:</p><pre><code>[^要注明的文本]</code></pre></li><li><p>以下实例演示了脚注的用法：</p><pre><code>创建脚注格式类似这样 [^RUNOOB]。[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</code></pre></li></ul><hr><h4 id="五-Markdown-列表"><a href="#五-Markdown-列表" class="headerlink" title="五. Markdown 列表"></a>五. Markdown 列表</h4><ul><li>Markdown 支持有序列表和无序列表。</li><li>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</li></ul><pre><code>* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项</code></pre><ul><li>有序列表使用数字并加上 . 号来表示，如：</li></ul><pre><code>1. 第一项2. 第二项3. 第三项</code></pre><ul><li><strong>列表嵌套</strong><ul><li>列表嵌套只需在子列表中的选项添加四个空格即可：</li></ul></li></ul><pre><code>1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素</code></pre><hr><h4 id="六-Markdown-区块"><a href="#六-Markdown-区块" class="headerlink" title="六. Markdown 区块"></a>六. Markdown 区块</h4><ul><li>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</li><li>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：  </li><li><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote></li></ul><hr><h4 id="七-Markdown-代码"><a href="#七-Markdown-代码" class="headerlink" title="七. Markdown 代码"></a>七. Markdown 代码</h4><ul><li>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：<pre><code>`printf()` 函数也可以用 前后``` 包裹一段代码，并指定一种语言（也可以不指定）：</code></pre></li></ul><hr><h4 id="八-Markdown-链接"><a href="#八-Markdown-链接" class="headerlink" title="八. Markdown 链接"></a>八. Markdown 链接</h4><blockquote><p>链接使用方法如下：</p></blockquote><pre><code>[链接名称](链接地址)或者&lt;链接地址&gt;</code></pre><p>你有什么不懂的就找 <a href="https://www.baidu.com" target="_blank" rel="noopener">度娘</a></p><hr><h4 id="九-Markdown-图片"><a href="#九-Markdown-图片" class="headerlink" title="九. Markdown 图片"></a>九. Markdown 图片</h4><ul><li>Markdown 图片语法格式如下：</li></ul><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)</code></pre><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。<br><img src="http://piccn.ihuaben.com/pic/chapter/201912/0715/1575705212847-ZoV4Xu22qv_400-400.jpeg" alt="我不管，这就是兰兰！" title="这是兰兰"></li><li>Markdown 无法指定图片的高度与宽度，使用HTML标签<code>&lt;img&gt;</code></li></ul><img src="http://piccn.ihuaben.com/pic/chapter/201912/0715/1575705212847-ZoV4Xu22qv_400-400.jpeg" width="30%" title="这是缩水后的兰兰"><hr><h4 id="十-Markdown-表格"><a href="#十-Markdown-表格" class="headerlink" title="十. Markdown 表格"></a>十. Markdown 表格</h4><ul><li>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</li><li>对齐方式 <ul><li>我们可以设置表格的对齐方式：</li><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul></li></ul><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><hr><h4 id="十一-Markdown-高级技巧"><a href="#十一-Markdown-高级技巧" class="headerlink" title="十一. Markdown 高级技巧"></a>十一. Markdown 高级技巧</h4><ul><li><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p></li><li><p>目前支持的 HTML 元素有：<br><code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等</p></li><li><p>如：<br>使用 <code>&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt;</code>重启电脑</p></li><li><p>输出结果为：<br><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> </p></li><li><p><strong>转义</strong></p></li><li><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p></li></ul><pre><code>\*\* 正常显示星号 \*\*</code></pre><p>** 正常显示星号 **</p><ul><li>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</li></ul><pre><code>\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yilia主题</title>
      <link href="/2020/04/02/hexo-yilia-zhu-ti-you-hua/"/>
      <url>/2020/04/02/hexo-yilia-zhu-ti-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="yilia主题优化"><a href="#yilia主题优化" class="headerlink" title="yilia主题优化"></a>yilia主题优化</h1><h4 id="查看所有文章缺失模块"><a href="#查看所有文章缺失模块" class="headerlink" title="查看所有文章缺失模块"></a>查看所有文章缺失模块</h4><ul><li>在首次使用<code>yilia</code>时，点击所有文章时会出现模块找不到的错误，根据提示复制操作<a id="more"></a></li></ul><ul><li><code>_config.yml</code>路径是指 根目录下的，而非 yilia 主题下</li></ul><hr><h4 id="配置图片资源"><a href="#配置图片资源" class="headerlink" title="配置图片资源"></a>配置图片资源</h4><ul><li>路径 <code>blog/source/</code>下，添加 <code>assets</code> 文件夹，里面存放图片</li><li>配置文件引用。路径 <code>themes/yilia/_config.yml</code> 修改配置文件中图片地址</li></ul><pre><code>#你的头像urlavatar: /assets/img/头像.jpgfavicon: /assets/img/favicon.ico</code></pre><hr><h4 id="文章只显示摘要"><a href="#文章只显示摘要" class="headerlink" title="文章只显示摘要"></a>文章只显示摘要</h4><ul><li>点击主页时，发现所有文章都是全文显示，不利于查找，可控制显示的字数</li><li>在你 MD 格式文章正文插入 <code>&lt;!-- more --&gt;</code>即可，只会显示它之前的，此后的就不显示。</li><li>点击文章标题，全文阅读才可看到</li><li>同时在<code>themes/yilia/_config.yml</code>注释掉<code>excerpt_link: more</code></li></ul><hr><h4 id="主题作者名字更改"><a href="#主题作者名字更改" class="headerlink" title="主题作者名字更改"></a>主题作者名字更改</h4><ul><li>根目录下<code>_config.yml</code>更改author字段后的内容</li></ul><pre><code>author: (你的博客名)</code></pre><ul><li>更改完重新部署</li><li>删除博客底部 Hexo Theme Yilia by Litten</li><li>在<code>blog\themes\yilia\layout\_partial\footer.ejs</code>下修改：</li></ul><pre><code>&lt;div class=&quot;footer-right&quot;&gt;    This is Asgrad&lt;/div&gt;</code></pre><hr><h4 id="文章显示目录"><a href="#文章显示目录" class="headerlink" title="文章显示目录"></a>文章显示目录</h4><ul><li>增加文章目录<code>TOC(table of content )</code>，方便阅读文章。</li><li>在<code>themes/yilia/_config.ym</code>中配置 <code>toc: 2</code>。</li></ul><hr><h4 id="增加归档菜单"><a href="#增加归档菜单" class="headerlink" title="增加归档菜单"></a>增加归档菜单</h4><ul><li>修改 themes/yilia/_config.yml</li></ul><pre><code>menu:    主页:  /    归档:  /archives/index.html</code></pre><hr><h4 id="增加不蒜子统计"><a href="#增加不蒜子统计" class="headerlink" title="增加不蒜子统计"></a>增加不蒜子统计</h4><ul><li>统计博客的访问量</li><li><strong>安装不蒜子脚本</strong></li><li>在<code>themes\yilia\layout\_partial\after-footer.ejs</code>最后添加</li></ul><pre><code>&lt;script  async  src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></pre><ul><li><strong>添加统计网站访问量</strong></li><li>修改 <code>themes\yilia\layout\_partial\footer.ejs</code>，包括访客数和站点访问总量</li><li>注意修改文件后另存编码为UTF-8</li></ul><pre><code> # PV方式，单个用户连续点击 n 篇，记录 n 次记录值&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;# UV方式，单个用户连续点击 n 篇，记录 1 次记录值&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;  本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次&lt;/span&gt;</code></pre><hr><h4 id="添加评论系统Valine"><a href="#添加评论系统Valine" class="headerlink" title="添加评论系统Valine"></a>添加评论系统Valine</h4><ul><li>登录或注册 <strong>LeanCloud</strong>, 进入控制台后点击左下角创建应用，进入刚刚创建的应用，选择左下角的<kbd>设置</kbd>&gt;<kbd>应用Key</kbd>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</li><li>在<code>themes\yilia\_config.yml</code>后面添加valine设置（把<code>APP ID</code>，<code>APP KEY</code>换成自己应用中的信息）</li></ul><pre><code> #6、Valine https://valine.js.orgvaline:  appid: &#39;APP ID&#39; #Leancloud中自己的appId appkey: &#39;APP KEY&#39; #Leancloud应用自己的appKey verify: false #验证码 notify: false #评论回复提醒 avatar:&#39;&#39; // (&#39;&#39;/mp/identicon/monsterid/wavatar/robohash/retro/hide) placeholder: Just go go #评论框占位符</code></pre><ul><li>在<code>blog\themes\yilia\layout\_partial\article.ejs</code>中<code>&lt;% if (!index &amp;&amp; post.comments){ %&gt;</code>后添加代码</li></ul><pre><code>&lt;% if (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey){ %&gt;    &lt;section id=&quot;comments&quot; class=&quot;comments&quot;&gt;      &lt;style&gt;        .comments{margin:30px;padding:10px;background:#fff}        @media screen and (max-width:800px){.comments{margin:auto;padding:10px;background:#fff}}      &lt;/style&gt;      &lt;%- partial(&#39;post/valine&#39;, {        key: post.slug,        title: post.title,        url: config.url+url_for(post.path)        }) %&gt;  &lt;/section&gt;&lt;% } %&gt;</code></pre><ul><li><code>blog\themes\yilia\layout\_partial\post</code>下新建文件<code>valine.ejs</code>写入代码</li></ul><pre><code>&lt;div id=&quot;vcomment&quot; class=&quot;comment&quot;&gt;&lt;/div&gt; &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//unpkg.com/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;   var notify = &#39;&lt;%= theme.valine.notify %&gt;&#39; == true ? true : false;   var verify = &#39;&lt;%= theme.valine.verify %&gt;&#39; == true ? true : false;    window.onload = function() {        new Valine({            el: &#39;.comment&#39;,            notify: notify,            verify: verify,            app_id: &quot;&lt;%= theme.valine.appid %&gt;&quot;,            app_key: &quot;&lt;%= theme.valine.appkey %&gt;&quot;,            placeholder: &quot;&lt;%= theme.valine.placeholder %&gt;&quot;,            avatar:&quot;&lt;%= theme.valine.avatar %&gt;&quot;        });    }&lt;/script&gt;</code></pre><hr><h4 id="头像旋转功能"><a href="#头像旋转功能" class="headerlink" title="头像旋转功能"></a>头像旋转功能</h4><ul><li>在<code>blog\themes\yilia\source</code>下新建<code>avatarrotation.css</code>：</li></ul><pre><code>.left-col #header .profilepic img {    /* 控制旋转速度时间*/  -webkit-transition: -webkit-transform 1.0s ease-out;  -moz-transition: -moz-transform 1.0s ease-out;  transition: transform 1.0s ease-out;}.left-col #header .profilepic img:hover {    /* 鼠标经过360% */  -webkit-transform: rotateZ(360deg);  -moz-transform: rotateZ(360deg);  transform: rotateZ(360deg);}</code></pre><ul><li>在<code>blog\themes\yilia\layout\_partia\head.ejs</code>文件中<code>&lt;%- partial(&#39;css&#39;) %&gt;</code>下方添加代码</li></ul><pre><code>&lt;%- partial(&#39;css&#39;) %&gt;  &lt;% if (theme.avatarrotation) { %&gt;    &lt;link rel = &quot;stylesheet&quot; type = &quot;text/css&quot; href = &quot;/avatarrotation.css&quot;&gt;  &lt;% } %&gt;</code></pre><ul><li>在yilia的_config.yml下：</li></ul><pre><code>头像是否旋转(如果不要旋转取false)avatarrotation: true</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello-world</title>
      <link href="/2020/04/02/hello-world/"/>
      <url>/2020/04/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客</title>
      <link href="/2020/04/02/hexo-github-da-jian-ge-ren-bo-ke/"/>
      <url>/2020/04/02/hexo-github-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建博客笔记"><a href="#搭建博客笔记" class="headerlink" title="搭建博客笔记"></a>搭建博客笔记</h1><p>在B站看到github+hexo搭建个人博客的视频，一时间来了兴趣开始着手搭建。<br>此文章用于记录自己搭建的过程，也算是个小教程，内容集合了一些自己的理解和各路大神（太多，就不一一说了）的讲解。一方面方便自己以后回过头来查看。<br>另一方面想见证自己学习的过程。  </p><p><strong>GitHub page平台</strong>: GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git作为唯一的版本库格式进行托管，故名GitHub.<br><strong>Github</strong>: <a href="https://github.com/" target="_blank" rel="noopener">网址</a>  </p><p><strong>Hexo</strong>: hexo是一个高效的静态网站生成框架，基于Node.js，快速，简单且功能强大，是搭建博客的首选框架。通过Hexo，你可以直接使用Markdown语法来撰写博客。<br><strong>Hexo</strong>: <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">网址</a></p><p>使用github平台上托管博客。我们可以放心写作，又不需要自购服务器域名那样定期维护，hexo作为一个快速简洁的博客框架，用它来搭建博客会非常轻松。</p><h2 id="一-搭建博客"><a href="#一-搭建博客" class="headerlink" title="一. 搭建博客"></a>一. 搭建博客</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>由于Hexo是基于node.js编写的，所以要先安装node.js和里面的npm工具<strong>（Node.js打包管理工具）</strong>。<br><strong>Node.js</strong>: Node是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的<strong>脚本语言</strong>。  </p><p><strong>Node</strong>: <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">下载地址</a></p><h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>为了把本地的博客文件上传到github上面去，需要工具Git。  </p><p><strong>Git</strong>: Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。</p><p><strong>git</strong>: <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a>  </p><p>下载后直接使用<strong>Git Bash</strong>输入命令,不需要用到cmd</p><h3 id="Git-Bash输入指令"><a href="#Git-Bash输入指令" class="headerlink" title="Git Bash输入指令"></a>Git Bash输入指令</h3><p>想对hexo 指令做更深入的了解，可以访问<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">hexo指令网址</a></p><p>按顺序输入以后命令</p><a id="more"></a><pre><code>node -v           查看node版本，检查是否安装成功npm -v            查看npm版本，检查是否安装成功npm install -g cnpm --registry=http://registry.npm.taobao.org           安装淘宝的cnpm 管理器，阿里的国内镜像cnpm -v           查看cnpm版本，检查是否安装成功cnpm install -g hexo-cli           安装hexo博客框架hexo -v           查看hexo版本，检查是否安装成功mkdir blog        创建blog（名字自取）目录，存放博客文件cd blog           进入blog目录，此后对博客的修改基于blog目录hexo init         当前文件夹初始化-生成博客。</code></pre><p>新建完成后，我们的blog文件夹就有以下文件：</p><ul><li>node_modules: 依赖包，node.js各种库的目录</li><li>public：生成的网页文件目录</li><li>scaffolds：新文章和新页面的初始模板</li><li>source：用来存放你的文章和图片等资源文件<ul><li>_posts</li><li>assets</li></ul></li><li>themes：存放主题</li><li>_config.yml: 博客的配置文件<strong>（非常重要）</strong>  </li></ul><p>下面流程中我们在blog常用到的简单命令：  </p><ul><li><strong>hexo clean</strong>（清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。）</li><li><strong>hexo generate</strong>（可以简写为<strong>hexo g</strong>，生成静态文件）</li><li><strong>hexo server</strong>（可以简写为<strong>hexo s</strong>，启动服务器。默认情况下，访问网址为：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ）</li><li><strong>hexo deploy</strong>（可以简写为：<strong>hexo d</strong>，部署网站）</li></ul><p>了解完后，接着输入以下命令</p><pre><code>hexo server           http://localhost:4000/           默认本地访问地址hexo n &quot;我的第一篇文章&quot;           （名字可自取），创建新文章 返回blog目录hexo cleanhexo g</code></pre><p>打开Github，右上角+新建一个项目仓库New repository，项目命名为：<strong>Github自身用户名.github.io</strong><br>只有这样设置，将博客部署到github才会被识别</p><pre><code>cnpm install --save hexo-deployer-git         在blog目录下安装git部署插件</code></pre><h3 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h3><p>打开博客根目录下的_config.yml文件<strong>（博客的配置文件）</strong>，在这里你可以修改与博客配置相关的各种信息。  </p><p>修改博客最后一行</p><pre><code>deploy:  type: git  repo: https://github.com/YourGithubName/YourGithubName.github.io.git  branch: master</code></pre><p>repository改为自己github项目地址，就是部署时告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。</p><pre><code>hexo cleanhexo ghexo d                                                                  注意deploy时可能要你输入username和password。https://YourGithubName.github.io/`                                      部署成功后，访问这个地址可以查看博客</code></pre><hr><h2 id="二-定制博客"><a href="#二-定制博客" class="headerlink" title="二. 定制博客"></a>二. 定制博客</h2><p>建议了解上方<strong>blog文件目录</strong>和<strong>hexo基本配置</strong>  </p><p>hexo配置文档：<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">网址</a></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>hexo默认主题是lanscape，不过太显单调了。  </p><p>我们可以到github或是Hexo上下载自己喜欢的主题。</p><p>这里我推荐两个，一个是yilia，另一个则是matery。后续有较好的主题，我会继续推荐 </p><p><strong>yilia</strong>：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">下载地址</a><br><strong>matery</strong>: <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">下载地址</a><br><strong>next</strong>: <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">github排名第一主题，我在这里放出来</a></p><p>大家可以根据<strong>创作者放出的教程</strong>一步步安装主题，下面是一个yilia安装的示范：  </p><pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia     通过克隆方式将yilia主题下到themes主题下的yilia目录下修改hexo根目录下的 _config.yml 文件 ：定位到 theme: yilia</code></pre><h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><p>原来的主题缺少404页面，我们可以自做。  </p><p>首先在/source/目录下新建一个<strong>404.md</strong>，可以用命令新建，也可以到_posts文件夹右键新建</p><pre><code>title: 404date: &#39;&#39;type: &quot;404&quot;layout: &quot;404&quot;description: &quot;我崩溃了！真的！我都不知道你到底想找什么！！！&quot;</code></pre><p>然后在/themes/matery/layout/目录下新建<strong>404.ejs</strong>文件</p><pre><code>&lt;style type=&quot;text/css&quot;&gt;     /* don&#39;t remove. */     .about-cover {         height: 75vh;     } &lt;/style&gt; &lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class=&quot;container&quot;&gt;         &lt;div class=&quot;row&quot;&gt;             &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                 &lt;div class=&quot;brand&quot;&gt;                    &lt;div class=&quot;title center-align&quot;&gt;                         404                     &lt;/div&gt;                     &lt;div class=&quot;description center-align&quot;&gt;                         &lt;%= page.description %&gt;                     &lt;/div&gt;                 &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt; &lt;script&gt;     // 每天切换 banner 图. Switch banner image every day.     $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;); &lt;/script&gt;</code></pre><h3 id="添加live2D"><a href="#添加live2D" class="headerlink" title="添加live2D"></a>添加live2D</h3><p>大多数博客都有的看板娘<strong>(老婆)</strong>，最激动人心的环节来了~  </p><p>Live2D是一种应用于电子游戏的绘图渲染技术，由日本Cybernoids公司开发，通过一系列的连续图像和人物建模来生成一种类似二维图像的三维模型，换句话说就是2D的素材实现一定程度的3D效果，但只能是一定程度3D，因为Live 2D人物无法大幅度转身。</p><p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">详细过程</a></p><p>首先检查博客主目录下的<code>package.json</code>是否有<code>&quot;hexo-helper-live2d&quot;: &quot;^3.1.1&quot;</code>依赖。<br>有的话可以先进行卸载：<code>npm uninstall hexo-helper-live2d</code>  </p><p>安装依赖：<code>npm install --save hexo-helper-live2d</code>  </p><p>成功了之后可以看到<code>blog</code>目录的<code>node_modules/</code>下有个<code>live2d-widget</code>目录，这是动画的主配置：</p><p>下载model文件，示例：<br><code>npm install live2d-widget-model-shizuku</code>,添加模型随自己挑选</p><p><a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">模型</a></p><p>安装完成可以在<code>node_modules/</code>下看到<code>live2d-widget-model-shizuku</code>文件夹</p><p>最后，添加live2d看板娘到hexo:  </p><p>配置Hexo的<code>主_config.yml</code>或者使用的主题的<code>_config.yml</code><br>添加以下代码到配置文件中：</p><pre><code># live2dlive2d:  userConfig:   enable: true  scriptFrom: local  # pluginRootPath: live2dw/  # pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-shizuku  display:    position: right    width: 200    height: 600    hOffset: 0       vOffset: -198    mobile:    show: true  react:    opacity: 1  dialog:    enable: true    hitokoto: true</code></pre><p>使用<code>hexo g</code>生成文件，<code>hexo s</code>即可在本地查看效果</p><h3 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h3><p>这个主题自带了gittalk、gitment、valine等评论插件，所以我们只需要去主题下的配置文件修改对应插件参数就行了。</p><p>注意：<strong>Valine</strong>评论模块，在blog目录下config.yml中。<code>appId</code>和<code>appKey</code>字段是需要自己注册登录<code>leancloud</code>官网，创建应用然后获取</p><p><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">leanCloud网址</a></p><h3 id="添加博客动态标签"><a href="#添加博客动态标签" class="headerlink" title="添加博客动态标签"></a>添加博客动态标签</h3><p>原理就是给博客增加一个事件判断，如下图所示：</p><p>路径：<code>themes/matery/layout/layout.ejs</code>，在任意位置添加如下代码：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;            var OriginTitile = document.title,                st;            document.addEventListener(&quot;visibilitychange&quot;, function () {                document.hidden ? (document.title = &quot;✪ ω ✪你想捉迷藏吗&quot;, clearTimeout(st)) : (document.title =                    &quot;ヾ(•ω•`)o找到你了！&quot;, st = setTimeout(function () {                        document.title = OriginTitile                    }, 3e3))            })&lt;/script&gt;</code></pre><hr><h2 id="三-博客优化"><a href="#三-博客优化" class="headerlink" title="三. 博客优化"></a>三. 博客优化</h2><h3 id="npm速度优化"><a href="#npm速度优化" class="headerlink" title="npm速度优化"></a>npm速度优化</h3><p>玩hexo的，肯定经常使用npm，但是npm的下载速度太慢。</p><p>前面我们提到过一次<strong>cnpm</strong>，下面介绍一下</p><ul><li>阿里的淘宝团队在国内做了个跟npm仓库一样的镜像叫cnpm。</li><li>淘宝镜像与npm官方包的同步频率目前为10分钟一次，来保证尽量与官方服务同步。</li><li>二者可以说是一样，可以说没有差别。</li></ul><p>安装cnpm命令：<br><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></p><p>安装后，测试是否安装成功：<code>cnpm -v</code></p><p>成功后，以后都可以使用 <code>cnpm</code> 代替 <code>npm</code> 来执行命令</p><h3 id="全站CDN加速"><a href="#全站CDN加速" class="headerlink" title="全站CDN加速"></a>全站CDN加速</h3><p>CDN的全称是<strong>Content Delivery Network</strong>，即内容分发网络。</p><p>CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><p>CDN的关键技术主要有内容存储和分发技术。</p><p>由于github使用国外服务器，放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p><p>用法：<br><code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></p><p>还可以配合PicGo图床上传工具的自定义域名前缀来上传图片，使用极其方便。</p><h3 id="打造稳定快速、高效免费图床"><a href="#打造稳定快速、高效免费图床" class="headerlink" title="打造稳定快速、高效免费图床"></a>打造稳定快速、高效免费图床</h3><p>本图床是基于Github的，采用jsdelivr cdn进行加速，上传工具采用的是PicGo。</p><p>新建一个GitHub仓库</p><p>在主页依次选择<code>Settings</code>-<code>Developer settings</code>-<code>Personal access tokens</code>-<code>Generate new token</code>，填写好描述，勾选<code>repo</code>（仓库权限），然后点击<code>Generate token</code>生成一个<code>Token</code>，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><p>配置PicGo</p><p>前往下载PicGo，安装好后开始配置Github图床</p><ul><li>设定仓库名：按照【用户名 / 图床仓库名】的格式填写</li><li>设定分支名：<code>master</code></li><li>设定Token：粘贴之前生成的<code>Token</code></li><li>指定存储路径：填写想要储存的路径，如images/，这样就会在仓库下创建一个名为 images 的文件夹，上传图片将会储存在此文件夹中</li><li>设定自定义域名：它的作用是，在图片上传后，PicGo会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code>，上传完毕后，我们就可以通过<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径</code>加速访问我们的图片了</li></ul><p>配置好PicGo后，将图片拖拽到上传区，将会自动上传并复制访问链接，将链接粘贴到博文中就行了。</p><hr><p>暂且写到这里，就此收键。</p><p>To be continue…..</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
